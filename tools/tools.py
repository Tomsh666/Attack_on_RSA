import os
import random
import string
import struct

from Crypto.PublicKey import RSA
from Crypto.Cipher import AES, PKCS1_OAEP
from Crypto.Util.number import getPrime, GCD, inverse


def generate_rsa_keys():
    p = getPrime(1024)
    q = getPrime(1024)
    n = p * q
    phi = (p - 1) * (q - 1)
    e = 665537
    while e < phi:
        if GCD(e, phi) == 1:
            break
        else:
            e += 1
    e1 = e
    d1 = inverse(e1, phi)
    e += 1
    while e < phi:
        if GCD(e, phi) == 1:
            break
        else:
            e += 1
    e2 = e
    d2 = inverse(e2, phi)
    return n, e1, d1, e2, d2


def vuln_keys(k):
    TEST_RSA_KEYS = [
        (
            75950871355384530828688035765956276093625480201520681699750914093018796586998941296458262529135778110091278892595881194810762364332852434985524609568069706042555042993179200707193721443861719284763830615863175366303459628628771622629609295991857968540391757220197558282412841734918840869193726508427790034011,
            98778114687243660940897569370956213547812285779364263989177922415689950955857962589728608916804739371910702115493346928441393311530714403970512673031935350833289014221121538824660665663321104131142731033547169348381824950865156474122516874356121730124534745558357665383856341982531287790245767014156370897403,
            2658058767276186670787958959093943288483888783512405911137047431301855448851,
        ),
        (
            67465199591094845420353921302697603918410554008193138205945438392744628468382068223236124166832179384729830690039137406530039680026452004279777689404902476391407647094380416840720231021612649476304564358086664072740004887419271355666781742383336269222653405504471196426564202476815307727916643266783939007301,
            135337098864861762849444486559146531808444082587625810850199329172048142655238503407148900508845784557200462249781996037515167929402022525309858989354292822325617885084756475581773580459046788497984726455186286910955559510135130785398369310858859345121940755859606923545108920081228145481085021945227772040273,
            33764253802471269044938937556170230660866235760017258125539432797737748872109,
        ),
        (
            9304136264660568140686862186187511077148215537778473701680224077104759556524806221428605640950390001263428726489122568157832100651691011679654740227595630119870911445592700237544441315015213855270464874952687622604606072732533484320323086336992051120725396873039775478035909843366142774959888380593778324395,
            96465972850609020994945589800028783305766597052406517937524385948891199514933704912914057777408279285724977105694636228946951910117797812521467988090454211399870909634844928965182767374238297271515007744350776699036228146296343001138151590052444550392692481284924122455109864282744285707277840265513502766289,
            27301901455240376722519943230900988162188793641089248899099829500087927920471,
        ),
        (
            35961536309805422342431351560139163297630044958293869428593235332227975589055524226823822654527920078164045973229119173208062966198577592871090664830151050557149266459664661676878110693641260063343773306660218337398774210854885468973109287145307366768227022100236234130203479550886626762193469538522561246059,
            140218832932868045882627879961620764068058074858749050465999439722819507711925915169867590619396810623640473785662703361993485472710525251068839262337414794164816889420985460451580112212226395323715872594764747543219713664013293164214096958026173477002591627937571738071647131547768970751267709175804439113679,
            23842578440171414700575116612814952567579921144409093349871464267119307273635,
        ),
        (
            40294880839859147669652414146976997647277517105672827513718836418824797676921364500683402952101502685459796845395495204458592698512794602249907104469288424635540364955191775194802336815908798930515697266656109552336662650835965133272889345215243703919576652161118913313730768713419086638800212042477572223459,
            84004468415281016700119398341193872984364933150616353791049099329622690440293304888170116229516296925892223428231603020981935491671278953462960440395116350925030529503114556632143763655552561739829707234171278377715510468671305819932624062360913570381798185188341647537852491638218533559405165266887046428751,
            21412058665127867590675382814994666536890959721949684990267392212357774992475,
        )
    ]
    return TEST_RSA_KEYS[k]


def run_rsa():
    create_random_files(num_files=4, min_size=100, max_size=1000, output_dir="text_dir")


def generate_random_content(size):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=size))


def pad_content(content):
    pad_length = 16 - (len(content) % 16)
    return content + chr(0x03) * pad_length


def create_random_files(num_files, min_size, max_size, output_dir):
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    file_size = random.randint(min_size, max_size)
    content = generate_random_content(file_size)
    padded_content = pad_content(content)
    original_size = len(content)
    tmp_e = 3
    print(tmp_e)
    for i in range(num_files):
        key = RSA.generate(2048, e=tmp_e)
        public_key = key.publickey()
        with open(os.path.join(output_dir, f'public_key{i + 1}.pem'), 'wb') as f:
            f.write(public_key.export_key(format='PEM'))
        file_name = os.path.join(output_dir, f"file_{i + 1}.txt")
        aes_key = os.urandom(32)
        iv = os.urandom(16)

        encrypted_content = encrypt_aes(aes_key, iv, padded_content.encode())

        encrypted_aes_key = encrypt_rsa(public_key, aes_key)
        print(int.from_bytes(encrypted_aes_key, byteorder='big'))
        with open(file_name, 'wb') as f:
            f.write(struct.pack('<Q', original_size))
            f.write(iv)
            f.write(encrypted_aes_key)
            f.write(encrypted_content)
        print(
            f"Created {file_name} with original size {original_size} bytes and final size {len(encrypted_content)} bytes.")


def encrypt_aes(key, iv, content):
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return cipher.encrypt(content)


def encrypt_rsa(public_key, data):
    cipher = PKCS1_OAEP.new(public_key)
    return cipher.encrypt(data)

